// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app/server"
	cfg "github.com/hertz-contrib/http2/config"
	"github.com/hertz-contrib/http2/factory"
	hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/pprof"
	"github.com/kitex-contrib/obs-opentelemetry/provider"
	"go-ssip/app/common/consts"
	g "go-ssip/app/service/api/http/global"
	"go-ssip/app/service/api/http/initialize"
	"go-ssip/app/service/api/http/initialize/rpc"
	"time"
)

func main() {
	initialize.InitLogger(consts.HttpApiName)
	initialize.InitConfig()
	r, info := initialize.InitRegistry()
	tracer, trcCfg := hertztracing.NewServerTracer()
	rpc.Init()
	p := provider.NewOpenTelemetryProvider(
		provider.WithServiceName(g.ServerConfig.Name),
		provider.WithExportEndpoint(g.ServerConfig.OtelInfo.EndPoint),
		provider.WithInsecure(),
	)
	defer p.Shutdown(context.Background())

	h := server.New(
		tracer,
		server.WithALPN(true),
		server.WithHostPorts(fmt.Sprintf(":%d", g.ServerConfig.Port)),
		server.WithRegistry(r, info),
		server.WithHandleMethodNotAllowed(true),
	)

	h.AddProtocol("h2", factory.NewServerFactory(
		cfg.WithReadTimeout(time.Minute),
		cfg.WithDisableKeepAlive(false)))

	pprof.Register(h)
	h.Use(hertztracing.ServerMiddleware(trcCfg))

	register(h)
	h.Spin()
}
