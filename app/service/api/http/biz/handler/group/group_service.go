// Code generated by hertz generator.

package group

import (
	"context"
	"github.com/spf13/cast"
	"go-ssip/app/common/errno"
	"go-ssip/app/common/tools"
	"go.uber.org/zap"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	kgroup "go-ssip/app/common/kitex_gen/group"
	hgroup "go-ssip/app/service/api/http/biz/model/group"
	g "go-ssip/app/service/api/http/global"
)

// CreateGroup .
// @router /group [POST]
func CreateGroup(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hgroup.CreateGroupReq
	resp := new(kgroup.CreateGroupResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	if req.GroupName == "" {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	res, err := g.GroupClient.CreateGroup(ctx, &kgroup.CreateGroupReq{GroupName: req.GroupName})
	if err != nil {
		g.Logger.Error("rpc group service err", zap.Error(err))
		resp.BaseResp = tools.BuildBaseResp(errno.RPCGroupSrvErr)
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	err = tools.ParseBaseResp(res.BaseResp)
	if err != nil {
		c.JSON(http.StatusInternalServerError, res)
		return
	}

	c.JSON(consts.StatusOK, res)
}

// JoinGroup .
// @router /group/member [POST]
func JoinGroup(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hgroup.JoinGroupReq
	resp := new(kgroup.JoinGroupResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	UserID, ok := c.Get("ID")
	if !ok {
		resp.BaseResp = tools.BuildBaseResp(errno.AuthorizeFail)
		c.JSON(consts.StatusForbidden, resp)
		return
	}
	res, err := g.GroupClient.JoinGroup(ctx, &kgroup.JoinGroupReq{GroupId: req.GroupID, UserId: cast.ToInt64(UserID)})

	if err != nil {
		g.Logger.Error("rpc group service err", zap.Error(err))
		resp.BaseResp = tools.BuildBaseResp(errno.RPCGroupSrvErr)
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, res)
}

// QuitGroup .
// @router /group/member [DELETE]
func QuitGroup(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hgroup.QuitGroupReq
	resp := new(kgroup.QuitGroupResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	UserID, ok := c.Get("ID")
	if !ok {
		resp.BaseResp = tools.BuildBaseResp(errno.AuthorizeFail)
		c.JSON(consts.StatusForbidden, resp)
		return
	}

	res, err := g.GroupClient.QuitGroup(ctx, &kgroup.QuitGroupReq{GroupId: req.GroupID, UserId: cast.ToInt64(UserID)})

	if err != nil {
		g.Logger.Error("rpc group service err", zap.Error(err))
		resp.BaseResp = tools.BuildBaseResp(errno.RPCGroupSrvErr)
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	err = tools.ParseBaseResp(res.BaseResp)
	if err != nil {
		c.JSON(http.StatusInternalServerError, err)
		return
	}

	c.JSON(consts.StatusOK, res)

}
