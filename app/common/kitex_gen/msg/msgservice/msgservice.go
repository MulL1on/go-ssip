// Code generated by Kitex v0.7.0. DO NOT EDIT.

package msgservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	msg "go-ssip/app/common/kitex_gen/msg"
)

func serviceInfo() *kitex.ServiceInfo {
	return msgServiceServiceInfo
}

var msgServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MsgService"
	handlerType := (*msg.MsgService)(nil)
	methods := map[string]kitex.MethodInfo{
		"sendMsg":      kitex.NewMethodInfo(sendMsgHandler, newMsgServiceSendMsgArgs, newMsgServiceSendMsgResult, false),
		"sendGroupMsg": kitex.NewMethodInfo(sendGroupMsgHandler, newMsgServiceSendGroupMsgArgs, newMsgServiceSendGroupMsgResult, false),
		"getMsg":       kitex.NewMethodInfo(getMsgHandler, newMsgServiceGetMsgArgs, newMsgServiceGetMsgResult, false),
		"getGroupMsg":  kitex.NewMethodInfo(getGroupMsgHandler, newMsgServiceGetGroupMsgArgs, newMsgServiceGetGroupMsgResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "msg",
		"ServiceFilePath": "manifest/idl/rpc/msg.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func sendMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*msg.MsgServiceSendMsgArgs)
	realResult := result.(*msg.MsgServiceSendMsgResult)
	success, err := handler.(msg.MsgService).SendMsg(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMsgServiceSendMsgArgs() interface{} {
	return msg.NewMsgServiceSendMsgArgs()
}

func newMsgServiceSendMsgResult() interface{} {
	return msg.NewMsgServiceSendMsgResult()
}

func sendGroupMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*msg.MsgServiceSendGroupMsgArgs)
	realResult := result.(*msg.MsgServiceSendGroupMsgResult)
	success, err := handler.(msg.MsgService).SendGroupMsg(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMsgServiceSendGroupMsgArgs() interface{} {
	return msg.NewMsgServiceSendGroupMsgArgs()
}

func newMsgServiceSendGroupMsgResult() interface{} {
	return msg.NewMsgServiceSendGroupMsgResult()
}

func getMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*msg.MsgServiceGetMsgArgs)
	realResult := result.(*msg.MsgServiceGetMsgResult)
	success, err := handler.(msg.MsgService).GetMsg(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMsgServiceGetMsgArgs() interface{} {
	return msg.NewMsgServiceGetMsgArgs()
}

func newMsgServiceGetMsgResult() interface{} {
	return msg.NewMsgServiceGetMsgResult()
}

func getGroupMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*msg.MsgServiceGetGroupMsgArgs)
	realResult := result.(*msg.MsgServiceGetGroupMsgResult)
	success, err := handler.(msg.MsgService).GetGroupMsg(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMsgServiceGetGroupMsgArgs() interface{} {
	return msg.NewMsgServiceGetGroupMsgArgs()
}

func newMsgServiceGetGroupMsgResult() interface{} {
	return msg.NewMsgServiceGetGroupMsgResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMsg(ctx context.Context, req *msg.SendMsgReq) (r *msg.SendMsgResp, err error) {
	var _args msg.MsgServiceSendMsgArgs
	_args.Req = req
	var _result msg.MsgServiceSendMsgResult
	if err = p.c.Call(ctx, "sendMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendGroupMsg(ctx context.Context, req *msg.SendGroupMsgReq) (r *msg.SendGroupMsgResp, err error) {
	var _args msg.MsgServiceSendGroupMsgArgs
	_args.Req = req
	var _result msg.MsgServiceSendGroupMsgResult
	if err = p.c.Call(ctx, "sendGroupMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMsg(ctx context.Context, req *msg.GetMsgReq) (r *msg.GetMsgResp, err error) {
	var _args msg.MsgServiceGetMsgArgs
	_args.Req = req
	var _result msg.MsgServiceGetMsgResult
	if err = p.c.Call(ctx, "getMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGroupMsg(ctx context.Context, req *msg.GetGroupMsgReq) (r *msg.GetGroupMsgResp, err error) {
	var _args msg.MsgServiceGetGroupMsgArgs
	_args.Req = req
	var _result msg.MsgServiceGetGroupMsgResult
	if err = p.c.Call(ctx, "getGroupMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
