// Code generated by Kitex v0.9.1. DO NOT EDIT.

package msgservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	msg "go-ssip/app/common/kitex_gen/msg"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"sendMsg": kitex.NewMethodInfo(
		sendMsgHandler,
		newMsgServiceSendMsgArgs,
		newMsgServiceSendMsgResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getMsg": kitex.NewMethodInfo(
		getMsgHandler,
		newMsgServiceGetMsgArgs,
		newMsgServiceGetMsgResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	msgServiceServiceInfo                = NewServiceInfo()
	msgServiceServiceInfoForClient       = NewServiceInfoForClient()
	msgServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return msgServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return msgServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return msgServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MsgService"
	handlerType := (*msg.MsgService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "msg",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func sendMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*msg.MsgServiceSendMsgArgs)
	realResult := result.(*msg.MsgServiceSendMsgResult)
	success, err := handler.(msg.MsgService).SendMsg(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMsgServiceSendMsgArgs() interface{} {
	return msg.NewMsgServiceSendMsgArgs()
}

func newMsgServiceSendMsgResult() interface{} {
	return msg.NewMsgServiceSendMsgResult()
}

func getMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*msg.MsgServiceGetMsgArgs)
	realResult := result.(*msg.MsgServiceGetMsgResult)
	success, err := handler.(msg.MsgService).GetMsg(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMsgServiceGetMsgArgs() interface{} {
	return msg.NewMsgServiceGetMsgArgs()
}

func newMsgServiceGetMsgResult() interface{} {
	return msg.NewMsgServiceGetMsgResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMsg(ctx context.Context, req *msg.SendMsgReq) (r *msg.SendMsgResp, err error) {
	var _args msg.MsgServiceSendMsgArgs
	_args.Req = req
	var _result msg.MsgServiceSendMsgResult
	if err = p.c.Call(ctx, "sendMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMsg(ctx context.Context, req *msg.GetMsgReq) (r *msg.GetMsgResp, err error) {
	var _args msg.MsgServiceGetMsgArgs
	_args.Req = req
	var _result msg.MsgServiceGetMsgResult
	if err = p.c.Call(ctx, "getMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
